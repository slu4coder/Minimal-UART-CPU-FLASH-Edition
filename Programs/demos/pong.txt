          *=$8000
; ***********************************
; *****                         *****
; ***** PONG by C. Herting 2020 *****
; *****                         *****
; ***********************************
          LDI $fe STA $ffff   ; init stack

          LDI 25 STA spos     ; initialize start variables
          LDI 0 STA xpos+0 LDI 13 STA xpos+1
          LDI 0 STA ypos+0 LDI 1 STA ypos+1
          LDI 80 STA xvel LDI 127 STA yvel

start:    INP                 ; Tastendruck => Schläger bewegen
          CPI 0
          BEQ movitx          ; NIX gedrückt?

; *********************
; ***** Steuerung *****
; *********************
          CPI ' '             ; Taste SPACE (nur nach GAME OVER)
          BNE nextkey1
            LDA ypos+1
            CPI 25            ; SPACE nur bei GAME OVER akzeptieren
            BCC movitx
              CLB ypos+0 CLB ypos+1
              LDI 127 STA yvel            
nextkey1: CPI 'a'             ; Taste 'a'
          BNE nextkey2
            LDA spos
            CPI 0
            BEQ nextkey2
              DEB spos
              JPA movitx
nextkey2: CPI 'd'             ; Taste 'd' abfragen
          BNE movitx
            LDA spos
            CPI 30			      ; Breite - 10
            BEQ movitx
              INB spos

; ********************
; ***** Bewegung *****
; ********************
movitx:   LDA xvel            ; Ball bewegen in x
          CPI 0
          BMI xneg
            LDA xvel          ; vx >= 0
            ADW xpos
            LDA xpos+1
            CPI 39		        ; rechter Rand erreicht?
            BNE movity
              NEB xvel
              JPA movity
xneg:     LDA xvel            ; vx < 0
          NEG
          SBW xpos
          LDA xpos+1
          CPI 0
          BNE movity
            NEB xvel

movity:   LDA yvel            ; Ball bewegen in y
          CPI 0
          BMI yneg
            LDA yvel          ; vy >= 0
            ADW ypos
            LDA ypos+1
              CPI 22          ; BALL GENAU AUF SCHLÄGERHÖHE?
              BCC clear       ; ypos ist noch höher => keine Aktion
                BEQ rackettest  ; ypos ist auf Schlägerhöhe => Schlägertest
                  CPI 25
                  BCC clear
                    CLB yvel
                    JPA clear
yneg:     LDA yvel            ; vy < 0
          NEG
          SBW ypos
          LDA ypos+1
          CPI 0
          BNE clear
            NEB yvel
            JPA clear

; ***********************************
; ***** Ball-Schläger-Kollision *****
; ***********************************
rackettest: LDA xpos+1        ; Ansprung nur bei ypos = Schlägerhöhe: Testet das Abprallen vom Schläger
            CPA spos
            BCC clear         ; xpos ist kleiner als linker Schlägerrand => vorbei
              SBI 10
							BCC rackhit	    ; fange den neg. Überlauf ab
  							CPA spos
                BCS clear     ; xpos ist größer oder gleich spos + 10 => vorbei
rackhit:          NEB yvel

; *********************************
; ***** Zeichnen eines frames *****
; *********************************
clear:    LDI 27 OUT JPS WaitOnUART    ; Bildschirm löschen
          LDI '[' OUT JPS WaitOnUART
          LDI 'H' OUT JPS WaitOnUART
					LDI 27 OUT JPS WaitOnUART
          LDI '[' OUT JPS WaitOnUART
          LDI 'J' OUT JPS WaitOnUART
          
          LDA spos            ; Cursor zur Schlägerpos
          STS -4
          LDI 23
          STS -5
          JPS CursorXY
          LDI 10              ; Schläger malen
          STA var
rackloop: LDI '=' OUT JPS WaitOnUART
          DEB var
          BNE rackloop

          LDA ypos+1          ; Ball malen?
          CPI 25
          BCS gameover        ; Ball nicht malen, da GAME OVER
            STS -5
            LDA xpos+1 STS -4
            JPS CursorXY
            LDI 'o' OUT JPS WaitOnUART ; Ball malen
            JPA frameend

gameover: LDI 1 STS -4
          LDI 11 STS -5
          JPS CursorXY
          LDI <text STS -3		; put MSB of string address on the stack
          LDI >text STS -4		; put LSB of string address on the stack
          JPS PrintText

frameend: CLW var+0             ; WARTEN, DAMIT EIN FRAME EINE ZEIT DAUERT
          LDI 8
          STA var+1
waitloop: DEW var
          BNE waitloop

          JPA start

text:   	"GAME OVER - PRESS SPACE TO PLAY AGAIN", 0

; ***** Schreibt einen nullterminierten String *****
PrintText: 		LDS -1 STA Print_ptr+0
            	LDS -2 STA Print_ptr+1 	         	; get LSB and MSB
  printloop:  LDR Print_ptr CPI 0	    	        ; Print routine
							BEQ printend          		        ; string zuende?
            	  OUT JPS WaitOnUART
        		    INW Print_ptr         		      ; zeige auf das nächste Zeichen
     		        JPA printloop
  printend:	  RTS

; ********************************************************************************
; ***** Set the cursor xy position (caller deposits x in SP-4 and y in SP-5) *****
; ********************************************************************************
CursorXY:     LDI 27 OUT JPS WaitOnUART             ; Bring cursor home
              LDI '[' OUT JPS WaitOnUART
              LDI 'H' OUT JPS WaitOnUART

              LDS -2 CPI 0
              BEQ CursorNoX
                LDI 27 OUT JPS WaitOnUART
                LDI '[' OUT JPS WaitOnUART
                JPS CursorDec					              ; schreibe Anzahl x in DEC
  							LDI 'C' OUT JPS WaitOnUART
CursorNoX:    LDS -3 CPI 0
              BEQ CursorNoY
                STS -2
                LDI 27 OUT JPS WaitOnUART
                LDI '[' OUT JPS WaitOnUART
                JPS CursorDec					              ; schreibe Anzahl y in DEC
                LDI 'B' OUT JPS WaitOnUART
CursorNoY:		RTS

CursorDec:	LDS 0								    ; subroutine printing out SP-0 as a decimal number between 0 and 63
            SBI 30
            BCS Cursorprint3
              ADI 10
              BPL Cursorprint2
                ADI 10
                BPL Cursorprint1
                  ADI 10
CursorEiner:     	ADI '0'
                  OUT
                  NOP
WaitOnUART:       NOP NOP NOP NOP NOP NOP NOP NOP
							  	RTS
Cursorprint3:	STS 0                 ; Einer sichern
              LDI '3'   						; "3" ausgeben
CursorZehner: OUT NOP NOP NOP NOP NOP NOP NOP NOP NOP
              LDS 0                 ; Einer laden
              JPA CursorEiner
Cursorprint2:	STS 0
              LDI '2'   						; "2" ausgeben
							JPA CursorZehner
Cursorprint1:	STS 0
              LDI '1'   						; "1" ausgeben
							JPA CursorZehner


                #end
                *=$fe00
spos:           0                   ; x-Position des Schlägers (links)
xpos:           0, 0                ; LSB, MSB der x-Textposition des Balls
ypos:           0, 0                ; LSB, MSB der y-Textposition des Balls
xvel:           0                   ; signed Geschwindigkeitsvektor des Balls
yvel:           0
var:            0, 0                ; Zählvariable
Print_ptr:			0, 0								; Zeiger auf den Text

								#begin
								*=$8000
