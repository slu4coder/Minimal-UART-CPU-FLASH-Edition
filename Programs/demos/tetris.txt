               *=$8000
; **********************************************
; *****                                    *****
; *****                                    *****
; *****    MINIMAL TETRIS by Slu4 (2020)   *****
; *****  with SUPER ROTATION SYSTEM (SRS)  *****
; ***** Original by Alexej Pajitnov (1984) *****
; *****                                    *****
; *****       last update 22.12.2020       *****
; *****            ROM Version             *****
; *****                                    *****
; **********************************************
              LDI $fe STA $ffff           ; init stack
game_restart: CLB state
              JPS PrintIntro

game_loop:    LDI 27 OUT JPS WaitOnUART   ; lass den cursor verschwinden
              LDI '[' OUT JPS WaitOnUART
              LDI 'H' OUT JPS WaitOnUART
              JPS Sleep                   ; refresh alle 1/60s
              JPS Randomize               ; Zufallsgenerator bedienen
              LDA state                   ; switch depending on game state
              DEC
              BCC state_intro
                DEC
                BCC state_run
                  JPA state_over


; ***** STATE INTRO **********************************************************************************

state_intro:  INP                      ; non-blocking key input
              CPI 32
              BNE game_loop            ; immediate loop-back
                LDI <vram STA ptr+0    ; GAME VORBEREITEN!!!
                LDI >vram STA ptr+1    ; clear playfield
cfloop:         LDI '.' STR ptr
                INW ptr
                LDA ptr+0
                CPI 200
                BCC cfloop                
                  CLW score            ; reset all game variables
                  CLW gameframes       ; Spielzeit löschen
                  LDI 80 STA waiting   ; Fall-timer initialisieren
                  CLB dropsteps
                  JPS PrintFrame       ; Rahmen einmalig malen (mit leerem Spielfeld)
                  JPS NewShape         ; pick random shape to start with (no test required)
                  LDI '#' STA shapechar JPS PrintShape       ; Tetromino malen
                  LDI 27 OUT JPS WaitOnUART
                  LDI '[' OUT JPS WaitOnUART
                  LDI 'H' OUT JPS WaitOnUART
                  LDI <scoretext STS -3
                  LDI >scoretext STS -4
                  JPS PrintText
                  LDI 27 OUT JPS WaitOnUART
                  LDI '[' OUT JPS WaitOnUART
                  LDI '1' OUT JPS WaitOnUART
                  LDI '6' OUT JPS WaitOnUART
                  LDI 'C' OUT JPS WaitOnUART
                  LDI <hightext STS -3
                  LDI >hightext STS -4
                  JPS PrintText
                  LDA highscore+0 STS -3 LDA highscore+1 STS -4
                  JPS DecU16Print
                  LDI <controltext STS -3
                  LDI >controltext STS -4
                  JPS PrintText
                  INB state            ; STATE = RUNNING!!!
                  JPA game_loop


; ***** STATE RUN ***********************************************************************************

state_run:    INW gameframes           ; Zeit weiterzählen  
              DEB waiting              ; Tetromino fällt?
              BPL run_keyboard
                LDA gameframes+1       ; fall-timer "waiting" neu setzen
                LSR NEG ADI 80 STA waiting
                LDA xpos STS -3 LDA ypos INC STS -4
                JPS TestShape
                LDS -3 DEC
                BCC run_placeit                           ; Stelle BESETZT => Stein plazieren
                  LDI '.' STA shapechar JPS PrintShape  ; Stelle war frei => Stein fällt runter und weiter
                  INB ypos             
                  LDI '#' STA shapechar JPS PrintShape

run_keyboard: INP                                       ; Steuerung (non-blocking key input)
              CPI 0 BEQ game_loop
              CPI 'a' BEQ a_key
              CPI 'd' BEQ d_key
              CPI 'w' BEQ w_key
              CPI 's' BEQ s_key
              JPA game_loop

a_key:        LDI '.' STA shapechar JPS PrintShape
              LDA xpos DEC STS -3 LDA ypos STS -4 JPS TestShape
              LDS -3 SBB xpos
              JPA run_drawshape
d_key:        LDI '.' STA shapechar JPS PrintShape
              LDA xpos INC STS -3 LDA ypos STS -4 JPS TestShape
              LDS -3 ADB xpos
              JPA run_drawshape
w_key:        LDI '.' STA shapechar JPS PrintShape  ; alte Shape löschen
              JPS RotateShape                       ; rotierte shape erzeugen
              LDA xpos STS -3 LDA ypos STS -4 JPS TestShape LDS -3 DEC BCS run_drawshape                  ; test position
              LDA xpos INC STA xpos STS -3 LDA ypos STS -4 JPS TestShape LDS -3 DEC BCS run_drawshape     ; and possible wall kicks
              LDA xpos SBI 2 STA xpos STS -3 LDA ypos STS -4 JPS TestShape LDS -3 DEC BCS run_drawshape
              LDA xpos ADI 3 STA xpos STS -3 LDA ypos STS -4 JPS TestShape LDS -3 DEC BCS run_drawshape
              LDA xpos SBI 4 STA xpos STS -3 LDA ypos STS -4 JPS TestShape LDS -3 DEC BCS run_drawshape
                INB xpos           ; zurück auf Anfangsposition
                INB xpos
                JPS RotateShape    ; Rotation war nicht frei => zurückdrehen
                JPS RotateShape
                JPS RotateShape
                JPA run_drawshape
s_key:        JPS Randomize
              INB dropsteps
              LDI -1 STA waiting
              JPA game_loop

run_drawshape:LDI '#' STA shapechar JPS PrintShape
              JPA game_loop

run_placeit:  LDI <shape STA ptr+0
              LDI >shape STA ptr+1
              LDI >vram STA ptr2+1
              LDI 4 STA vari
rploop:       LDA xpos                ; SCHREIBE DIE FORM INS VRAM
              ADR ptr                 ; addiere shape-xoffset hinzu
              STA ptr2+0              ; beschreibe vram-pointer mit x-info
              INW ptr                 ; gehe zum shape-yoffset
              LDA ypos
              ADR ptr                 ; addiere shape-yoffset hinzu
              LSL PHS ADW ptr2        ; addiere y x 2 zum vram-pointer, Vorsicht, ADW ist nicht A-erhaltend
              PLS LSL LSL ADW ptr2
              LDI '#' STR ptr2        ; schreibe ins VRAM
              INW ptr
              DEB vari
              BNE rploop
                CLB anzrows           ; Anzahl der vollen Reihen auf 0 setzen
                LDI 10 STA ptr2+0     ; start of VRAM = Anfang Reihe 1
                LDI >vram STA ptr+1   ; später auch "ptr" zum Löschen verwenden... (dst)
                STA ptr1+1            ; später auch "ptr1" zum Löschen verwenden... (src)
                LDI 19 STA vary       ; 19 Reihen testen
rpyloop:      LDI 1 STA rowfull       ; nimm an, die Reihe sei voll 
              LDI 10 STA varx
rpxloop:      LDI '.' CPR ptr2
              BNE rpiswall 
                CLB rowfull           ; markiere diese Reihe als "nicht leer"!
rpiswall:     INB ptr2
              DEB varx
              BNE rpxloop
                LDA rowfull DEC
                BCC rpcopydone
                  INB anzrows           ; diese Reihe war voll!
                  LDA ptr2+0 DEC STA ptr+0  ; Ende der vollen Reihe -> ptr = destination
                  SBI 10 STA ptr1+0     ; ptr1 = source eine Reihe darüber                  
rpcopyloop:       LDR ptr1 STR ptr    ; Wert von darüber nach darunter kopieren
                  DEB ptr DEB ptr1
                  BCS rpcopyloop
rpleerloop:         INB ptr1
                    CPI 10
                    BCC rpcopydone
                    LDI '.' STR ptr1
                    JPA rpleerloop
rpcopydone:     DEB vary
                BNE rpyloop
                  LDI >wintable STA ptr+1 LDI <wintable STA ptr+0
                  LDA anzrows ADW ptr
                  LDR ptr ADW score LDR ptr ADW score     ; add score for cleared rows
                  LDA dropsteps ADW score                 ; add the drop points
                  LDI 27 OUT JPS WaitOnUART
                  LDI '[' OUT JPS WaitOnUART
                  LDI '6' OUT JPS WaitOnUART
                  LDI 'C' OUT JPS WaitOnUART
                  LDA score+0 STS -3 LDA score+1 STS -4
                  JPS DecU16Print       ; Score malen
                  LDA score+1           ; check if there's a new highscore
                  CPA highscore+1
                  BCC rpnewshape
                  BNE rpnewhigh  
                    LDA score+0         ; fast gleich => 2. Prüfung
                    CPA highscore+0
                    BCC rpnewshape
rpnewhigh:            LDA score+0 STA highscore+0   ; score wird highscore
                      LDA score+1 STA highscore+1

rpnewshape:     CLB dropsteps
                JPS NewShape            ; pick random shape to start with (no test required)
                JPS PrintField          ; Spielfeld malen
                JPS PrintShape          ; Tetromino malen
                LDA xpos STS -3 LDA ypos STS -4 JPS TestShape
                LDS -3 DEC
                BCS game_loop
                  INB state           ; INVALID POSITION => GAME OVER
                  JPS PrintOver
                  JPA game_loop


; ***** STATE OVER *****************************************************************************

state_over:   INP                     ; need to be non-blocking, so we can't use WIN here
              CPI 32
              BNE game_loop
                JPA game_restart

; **********************************************************************************************

NewShape:     LDI <shape STA ptr2+0     ; copy a random Tetromino into the shape structure
              LDI >shape STA ptr2+1
              LDI <minos STA ptr+0
              LDI >minos STA ptr+1
              LDA randomnum LSL LSL LSL ADA randomnum       ; x 9
              ADW ptr
              LDI 8 STA vari
nscopyloop:   LDR ptr STR ptr2
              INW ptr INW ptr2
              DEB vari
              BNE nscopyloop
                LDI 4 STA xpos
                LDI 1 STA ypos
                CLB yoff
                LDR ptr STA xoff                
                RTS

TestShape:    LDI <shape STA ptr+0    ; teste, ob diese Position für die aktuelle shape frei ist
              LDI >shape STA ptr+1
              LDI >vram STA ptr2+1
              LDI 4 STA vari
tsloop:       LDS -1                  ; lade test-xpos
              ADR ptr                 ; addiere shape-xoffset hinzu
              BMI tsoutside           ; prüfe linke Grenze
                CPI 10
                BCS tsoutside         ; prüfe rechte Grenze     
              STA ptr2+0              ; beschreibe vram-pointer mit x-info
              INW ptr                 ; gehe zum shape-yoffset
              LDS -2                  ; lade test-ypos
              ADR ptr                 ; addiere shape-yoffset hinzu
              BMI tsoutside           ; prüfe obere Grenze
                CPI 20
                BCS tsoutside         ; prüfe untere Grenze            
              LSL PHS ADW ptr2        ; addiere y x 2 zum vram-pointer
              PLS LSL LSL ADW ptr2    ; addiere y x 8 zum vram-pointer
              LDR ptr2                ; lies VRAM an dieser Stelle
              CPI '#'
              BEQ tsoutside
                INW ptr
                DEB vari
                BNE tsloop
                  LDI 1 STS -1        ; return "space is valid"
                  RTS
tsoutside:    LDI 0 STS -1            ; return "space is invalid"
              RTS

RotateShape:  LDA xoff ADB xpos
              LDA yoff ADB ypos
              LDI 5 STA vari
              LDI >shape STA ptr+1
              LDI <shape STA ptr+0
rsloop:       LDR ptr PHS INW ptr
              LDR ptr PHS DEW ptr
              PLS STR ptr INW ptr
              PLS NEG STR ptr INW ptr
              DEB vari
              BNE rsloop
                RTS

PrintShape:   LDI >shape STA ptr+1
              LDI <shape STA ptr+0
              LDI 4 STA vari
psloop:       LDA xpos ADI 14 ADR ptr STS -4
              INW ptr
              LDA ypos ADR ptr STS -5
              JPS CursorXY
              LDA shapechar
              OUT JPS WaitOnUART
              INW ptr                   ; gehe zum nächsten Quadrat
              DEB vari
              BNE psloop
                RTS


; **********************************************************************************************

PrintField:   LDI 27 OUT JPS WaitOnUART 
              LDI '[' OUT JPS WaitOnUART
              LDI 'H' OUT JPS WaitOnUART
              LDI >vram STA ptr+1
              CLB ptr+0
              LDI 20 STA vary
pflinestart:  LDI 27 OUT JPS WaitOnUART
              LDI '[' OUT JPS WaitOnUART
              LDI '1' OUT JPS WaitOnUART
              LDI '4' OUT JPS WaitOnUART
              LDI 'C' OUT JPS WaitOnUART
              LDI 10 STA varx
pfxloop:      LDR ptr 
              OUT JPS WaitOnUART
              INB ptr+0
              DEB varx
              BNE pfxloop
                LDI 10 OUT JPS WaitOnUART
                DEB vary
                BNE pflinestart
                  RTS              

PrintFrame:   LDI 27 OUT JPS WaitOnUART
              LDI '[' OUT JPS WaitOnUART
              LDI 'H' OUT JPS WaitOnUART
              LDI 27 OUT JPS WaitOnUART
              LDI '[' OUT JPS WaitOnUART
              LDI 'J' OUT JPS WaitOnUART
              LDI 20 STA vary              
pfrloop:      LDI 27 OUT JPS WaitOnUART
              LDI '[' OUT JPS WaitOnUART
              LDI '1' OUT JPS WaitOnUART
              LDI '2' OUT JPS WaitOnUART
              LDI 'C' OUT JPS WaitOnUART
              LDI <textframe1 STS -3
					    LDI >textframe1 STS -4
					    JPS PrintText
              DEB vary
              BNE pfrloop
                LDI 27 OUT JPS WaitOnUART
                LDI '[' OUT JPS WaitOnUART
                LDI '1' OUT JPS WaitOnUART
                LDI '2' OUT JPS WaitOnUART
                LDI 'C' OUT JPS WaitOnUART
                LDI <textframe2 STS -3
                LDI >textframe2 STS -4
                JPS PrintText
                LDI 27 OUT JPS WaitOnUART
                LDI '[' OUT JPS WaitOnUART
                LDI '1' OUT JPS WaitOnUART
                LDI '2' OUT JPS WaitOnUART
                LDI 'C' OUT JPS WaitOnUART
                LDI <textframe3 STS -3
                LDI >textframe3 STS -4
                JPS PrintText
                RTS

PrintIntro:   LDI 27 OUT JPS WaitOnUART
              LDI '[' OUT JPS WaitOnUART
              LDI 'H' OUT JPS WaitOnUART
              LDI 27 OUT JPS WaitOnUART
              LDI '[' OUT JPS WaitOnUART
              LDI 'J' OUT JPS WaitOnUART
              LDI 27 OUT JPS WaitOnUART
              LDI '[' OUT JPS WaitOnUART
              LDI '1' OUT JPS WaitOnUART
              LDI '0' OUT JPS WaitOnUART
              LDI 'B' OUT JPS WaitOnUART
              LDI <tetristext STS -3
					    LDI >tetristext STS -4
					    JPS PrintText
              JPA PrintSpace

PrintOver:    LDI 27 OUT JPS WaitOnUART
              LDI '[' OUT JPS WaitOnUART
              LDI 'H' OUT JPS WaitOnUART
              LDI 27 OUT JPS WaitOnUART
              LDI '[' OUT JPS WaitOnUART
              LDI '1' OUT JPS WaitOnUART
              LDI '0' OUT JPS WaitOnUART
              LDI 'B' OUT JPS WaitOnUART
              LDI 27 OUT JPS WaitOnUART
              LDI '[' OUT JPS WaitOnUART
              LDI '1' OUT JPS WaitOnUART
              LDI '4' OUT JPS WaitOnUART
              LDI 'C' OUT JPS WaitOnUART
              LDI <overtext STS -3
					    LDI >overtext STS -4
					    JPS PrintText
PrintSpace:   LDI 27 OUT JPS WaitOnUART
              LDI '[' OUT JPS WaitOnUART
              LDI '1' OUT JPS WaitOnUART
              LDI '2' OUT JPS WaitOnUART
              LDI 'B' OUT JPS WaitOnUART
              LDI 27 OUT JPS WaitOnUART
              LDI '[' OUT JPS WaitOnUART
              LDI '1' OUT JPS WaitOnUART
              LDI '3' OUT JPS WaitOnUART
              LDI 'C' OUT JPS WaitOnUART
              LDI <spacetext STS -3
					    LDI >spacetext STS -4
					    JPS PrintText
              RTS 

; **********************************************************************************************

Randomize:    INB randomnum               ; Randomize the piece generator simply with time
              CPI 7
              BCC randrts
                CLB randomnum             ; overflow happened => back to shape #0
randrts:      RTS

Sleep:        CLB ptr+0 LDI $04 STA ptr+1
sloop:        DEW ptr
              BCS sloop
                RTS

; **********************************************************************************************

; **************************************************
; ***** Schreibt einen nullterminierten String *****
; **************************************************
PrintText:	 	LDS -1 STA Print_ptr+0  		; get LSB
            	LDS -2 STA Print_ptr+1 			; get MSB
Printloop:  	LDR Print_ptr CPI 0	    		; Print routine
							BEQ Printend          			; string zuende? => gib das Zeichen aus
            	  OUT JPS WaitOnUART
        		    INW Print_ptr         		; zeige auf das nächste Zeichen
     		        JPA Printloop
Printend:	  	RTS

; ********************************************************************************
; ***** Set the cursor xy position (caller deposits x in SP-4 and y in SP-5) *****
; ********************************************************************************
CursorXY:     LDI 27 OUT JPS WaitOnUART             ; Bring cursor home
              LDI '[' OUT JPS WaitOnUART
              LDI 'H' OUT JPS WaitOnUART

              LDS -2 CPI 0
              BEQ CursorNoX
                LDI 27 OUT JPS WaitOnUART
                LDI '[' OUT JPS WaitOnUART
                JPS CursorDec					              ; schreibe Anzahl x in DEC
  							LDI 'C' OUT JPS WaitOnUART
CursorNoX:    LDS -3 CPI 0
              BEQ CursorNoY
                STS -2
                LDI 27 OUT JPS WaitOnUART
                LDI '[' OUT JPS WaitOnUART
                JPS CursorDec					              ; schreibe Anzahl y in DEC
                LDI 'B' OUT JPS WaitOnUART
CursorNoY:		RTS

CursorDec:	LDS 0								    ; subroutine printing out SP-0 as a decimal number between 0 and 63
            SBI 30
            BCS Cursorprint3
              ADI 10
              BPL Cursorprint2
                ADI 10
                BPL Cursorprint1
                  ADI 10
CursorEiner:     	ADI '0'
                  OUT
                  NOP
WaitOnUART:       NOP NOP NOP NOP NOP NOP NOP NOP
							  	RTS
Cursorprint3:	STS 0                 ; Einer sichern
              LDI '3'   						; "3" ausgeben
CursorZehner: OUT NOP NOP NOP NOP NOP NOP NOP NOP NOP
              LDS 0                 ; Einer laden
              JPA CursorEiner
Cursorprint2:	STS 0
              LDI '2'   						; "2" ausgeben
							JPA CursorZehner
Cursorprint1:	STS 0
              LDI '1'   						; "1" ausgeben
							JPA CursorZehner

; **********************************************************************
; ***** Print out a 16-bit UNSIGNED decimal number in format 00000 *****
; **********************************************************************
DecU16Print:		LDS -1 STA Dec16_A+0 STA Dec16_B+0
								LDS -2 STA Dec16_A+1 STA Dec16_B+1
                LDI '0'	STA Dec16_char
DecU16next1:		LDA Dec16_A+0 STA Dec16_B+0 LDA Dec16_A+1 STA Dec16_B+1		; A -> B
                LDI $10 SBW Dec16_B         ; LSB abziehen
								BCC DecU16pos2	  					; Überlauf des 16-bit Registers?			
                LDA Dec16_B+1 SBI $27
                BCC DecU16pos2
                  STA Dec16_A+1 LDA Dec16_B+0 STA Dec16_A+0
									INB Dec16_char						; Ziffer erhöhen
									JPA DecU16next1
DecU16pos2:			LDA Dec16_char	            ; Stelle ausgeben
                OUT JPS WaitOnUART
                LDI '0'	STA Dec16_char
DecU16next2:		LDA Dec16_A+0 STA Dec16_B+0 LDA Dec16_A+1 STA Dec16_B+1		; A -> B
								LDI $e8 SBW Dec16_B
                BCC DecU16pos3
                LDA Dec16_B+1 SBI $03
								BCC DecU16pos3
									STA Dec16_A+1 LDA Dec16_B+0 STA Dec16_A+0
									INB Dec16_char						; Ziffer erhöhen
									JPA DecU16next2
DecU16pos3:			LDA Dec16_char    	        ; Stelle ausgeben
                OUT JPS WaitOnUART
                LDI '0'	STA Dec16_char
DecU16next3:		LDA Dec16_A+0 STA Dec16_B+0 LDA Dec16_A+1 STA Dec16_B+1		; A -> B
								LDI 100 SBW Dec16_B
								BCC DecU16pos4
									LDA Dec16_B+1 STA Dec16_A+1 LDA Dec16_B+0 STA Dec16_A+0
									INB Dec16_char						; Ziffer erhöhen
									JPA DecU16next3
DecU16pos4:			LDA Dec16_char    	        ; Stelle ausgeben
                OUT JPS WaitOnUART
                LDI '0'	STA Dec16_char			; 10er Stelle zurücksetzen			
DecU16next4:		LDA Dec16_A									; hier muss nur noch das LSB betrachtet werden, da max. 100 drin sein kann
								SBI 10											; subtrahiere Stellenwert
								BCC DecU16pos5
									STA Dec16_A
									INB Dec16_char						; Ziffer hochzählen
									JPA DecU16next4
DecU16pos5:			LDA Dec16_char    	        ; Stelle ausgeben
                OUT JPS WaitOnUART
                LDA Dec16_A									; 1er-Stelle direkt ausgeben
								ADI '0'
                OUT JPS WaitOnUART
								RTS

; **********************************************************************************************

textframe1:   "<!..........!>", 10, 0
textframe2:   "<!==========!>", 10, 0
textframe3:   "  VVVVVVVVVV  ", 10, 0

tetristext:   " M I N I M A L   U A R T   T E T R I S", 10, 0
overtext:     "GAME  OVER", 10, 0
spacetext:    "Press  SPACE", 10, 0
scoretext:    "SCORE 00000", 0
hightext:     "HIGH ", 0
controltext:  10, 10, 10                     ; output text for keyboard controls
              "CONTROLS", 10, 10
              "A - Left", 10
              "D - Right", 10
              "W - Rotate", 10
              "S - Drop", 0

highscore:    $1a70                              ; holding the current highscore

minos:        0,  0,  1,  0,  0, -1, 1, -1,   1  ; Quadrat   ; initial tetrominos with initial x-offset for SRS
              -1, -1, 0,  -1, 0, 0,  1, 0,    0  ; Z
              -1, 0,  0,  0,  0, -1, 1, -1,   0  ; neg. Z
              -1, 0,  0,  0,  1, 0,  2, 0,    1  ; Stab
              -1, 0,  0,  0,  1, 0,  0, -1,   0  ; Podest
              -1, -1, -1, 0,  0, 0,  1, 0,    0  ; L
              -1, 0,  0,  0,  1, 0,  1, -1,   0  ; neg. L

wintable:     0, 20, 50, 100, 250           ; points depending on the number of cleared rows (are added twice)

              #end

              *=$fd00
vram:         ; ab hier 20*10 bytes Video RAM

              *=$fdc8
Dec16_char:		'0'
Dec16_A:			0, 0
Dec16_B:			0, 0

Print_ptr:		0, 0												  ; Zeiger der Funktion "PrintText"            

shapechar:    0                             ; current look of a piece, either '#' or '.'
shape:        0, 0, 0, 0, 0, 0, 0, 0        ; holding the current shape (and it's rotation state)
xoff:         0                             ; offsets for SRS rotation compensation
yoff:         0

state:        0         ; game state 0: intro, 1: running, 2: game over
score:        $0000     ; holding the current score 
waiting:      0         ; timer 
randomnum:    0         ; Random number generator
gameframes:   $0000     ; counting the game frames (1/60s)
xpos:         0         ; current position of the tetromino
ypos:         0    
ptr:          $0000     ; multi-purpose pointers
ptr1:         $0000
ptr2:         $0000
vari:         0         ; multi-purpose variables for loops
varx:         0
vary:         0
dropsteps:    0         ; counting the hard drop steps (for points)
anzrows:      0         ; count the number of cleared lines
rowfull:      0         ; boolean indicating whether a line was complete
